{"version":3,"sources":["containers/CustomField/Dropdown.tsx","common/hooks/useCustomField.tsx","../node_modules/systemjs/dist lazy groupOptions: {} namespace object"],"names":["Dropdown","_useCustomField","useCustomField","fieldData","setFieldData","_useState","useState","Values","Default","_useState2","_slicedToArray","fieldConfig","setFieldConfig","_useState3","_useState4","fieldValues","setFieldValues","_useState5","_useState6","fieldSelectValue","setFieldSelectValue","useEffect","ContentstackAppSDK","init","then","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","appSDK","customField","wrap","_context","prev","next","location","CustomField","sent","frame","updateHeight","field","getData","isEmpty","stop","_x","apply","arguments","values","console","log","value","_jsx","className","children","length","Select","selectLabel","options","map","index","id","label","Object","keys","searchableLable","onChange","e","useContext","CustomFieldExtensionContext","loading","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","module","exports"],"mappings":"mPA6FeA,UAnEE,WAEb,IACAC,EAAyCC,cAAjCC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aACnBC,EAAsCC,mBAAyB,CAC3DC,OAAQ,GACRC,QAAS,IACXC,EAAAC,YAAAL,EAAA,GAHKM,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAIlCI,EAAsCP,mBAAkB,IAAGQ,EAAAJ,YAAAG,EAAA,GAApDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAgDX,mBAAuB,CAAC,GAAEY,EAAAR,YAAAO,EAAA,GAAnEE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAiC5C,OA/BAG,qBAAU,WACNC,IAAmBC,OAAOC,KAAI,eAAAC,EAAAC,YAAAC,cAAAC,MAAC,SAAAC,EAAOC,GAAW,IAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACnBL,EAAOM,SAASC,YAAY,KAAD,EAEjB,OAF9BN,EAAWE,EAAAK,KACjB1B,EAAemB,EAAYpB,aAC3BoB,EAAYQ,MAAMC,aAAa,KAAKP,EAAAE,KAAA,EAChBJ,EAAYU,MAAMC,UAAU,KAAD,EAApCT,EAAAK,KACNK,kBAAQxC,IAA4B,OAAdA,EAGvBC,EAAaO,EAAYH,SAFrCJ,EAAaD,GAGH,yBAAA8B,EAAAW,OAAA,GAAAf,EAAA,KACL,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,EAV6B,GAWlC,GAAG,IASH1B,qBAAU,WACN,IAAM2B,EAASrC,EAAYJ,OAC3BS,EAAegC,EACnB,GAAG,CAACrC,IAEJU,qBAAU,WACN4B,QAAQC,IAAI/B,EAAiBgC,OAC7B/C,EAAae,EAAiBgC,MAClC,GAAG,CAAChC,IAGAiC,cAAA,OAAKC,UAAU,eAAcC,SACzBF,cAAA,OAAKC,UAAU,yBAAwBC,UACvB,OAAXvC,QAAW,IAAXA,OAAW,EAAXA,EAAawC,QAAS,EACnBH,cAACI,IAAM,CACHC,YAAY,mBACZC,QAAS3C,EAAY4C,KAAI,SAACR,EAAOS,GAAK,MAClC,CACIC,GAAID,EACJE,MAAOC,OAAOC,KAAKb,GAAO,GAC1Bc,gBAAiBF,OAAOC,KAAKb,GAAO,GACpCA,MAAOA,EAAMY,OAAOC,KAAKb,GAAO,IACnC,IAELe,SAAU,SAACC,GAAM,OAAK/C,EAAoB+C,EAAE,EAC5ChB,MAAOhC,IAGXiC,cAAA,KAAAE,SAAG,YAKvB,C,mCC3FA,qDASapD,EAAiB,WAC5B,IAAAuB,EAA+C2C,qBAC7CC,KAGF,MAAO,CAAEtC,YAJUN,EAAXM,YAIc3B,aAJWqB,EAAZrB,aAIekE,QAJM7C,EAAP6C,QAKrC,C,mBCfA,SAASC,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUlD,MAAK,WAC7B,IAAI2C,EAAI,IAAIQ,MAAM,uBAAyBH,EAAM,KAEjD,MADAL,EAAES,KAAO,mBACHT,CACP,GACD,CACAI,EAAyBP,KAAO,WAAa,MAAO,EAAI,EACxDO,EAAyBG,QAAUH,EACnCM,EAAOC,QAAUP,EACjBA,EAAyBV,GAAK,E","file":"static/js/9.5114c4bf.chunk.js","sourcesContent":["import Icon from \"../../assets/customfield.svg\";\nimport React, { useEffect, useState } from 'react';\nimport localeTexts from \"../../common/locales/en-us/index\";\nimport parse from \"html-react-parser\";\nimport ContentstackAppSDK from \"@contentstack/app-sdk\";\nimport { useCustomField } from \"../../common/hooks/useCustomField\";\nimport { Select } from \"@contentstack/venus-components\";\nimport '@contentstack/venus-components/build/main.css';\nimport { isEmpty } from \"lodash\";\n\ninterface DropdownValues {\n    Values: Value[],\n    Default: number\n}\n\ninterface Value {\n    [key: string]: number\n}\n\ninterface SelectOption {\n    id?: number,\n    label?: string,\n    searchableLable?: string,\n    value?: number\n}\n\nconst Dropdown = () => {\n\n    let datapointer: number;\n    const { fieldData, setFieldData }: any = useCustomField();\n    const [fieldConfig, setFieldConfig] = useState<DropdownValues>({\n        Values: [],\n        Default: 0\n    });\n    const [fieldValues, setFieldValues] = useState<Value[]>([]);\n    const [fieldSelectValue, setFieldSelectValue] = useState<SelectOption>({});\n\n    useEffect(() => {\n        ContentstackAppSDK.init().then(async (appSDK: any) => {\n            const customField = await appSDK.location.CustomField;\n            setFieldConfig(customField.fieldConfig);\n            customField.frame.updateHeight(400);\n            datapointer = await customField.field.getData();\n            if (!isEmpty(fieldData) && fieldData !== null) {\n\t\t\t\tsetFieldData(fieldData)\n\t\t\t} else {\n                setFieldData(fieldConfig.Default);\n            };\n        })\n    }, []);\n\n    // useEffect(() => {\n    //     const obj: SelectOption = {\n    //         id: datapointer,\n    //         label: fieldValues.filter(val)\n    //     }\n    // })\n\n    useEffect(() => {\n        const values = fieldConfig.Values;\n        setFieldValues(values);\n    }, [fieldConfig]);\n\n    useEffect(() => {\n        console.log(fieldSelectValue.value)\n        setFieldData(fieldSelectValue.value)\n    }, [fieldSelectValue])\n\n    return (\n        <div className=\"custom-field\">\n            <div className=\"custom-field-container\">\n                {fieldValues?.length > 0 ? (\n                    <Select\n                        selectLabel=\"Select an option\"\n                        options={fieldValues.map((value, index) => (\n                            {\n                                id: index,\n                                label: Object.keys(value)[0],\n                                searchableLable: Object.keys(value)[0],\n                                value: value[Object.keys(value)[0]]\n                            }\n                        ))}\n                        onChange={(e: any) => setFieldSelectValue(e)}\n                        value={fieldSelectValue}\n                    />\n                ) : (\n                    <p>derp</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Dropdown;\n","import { useContext } from \"react\";\nimport { CustomFieldExtensionContext, CustomFieldExtensionContextType } from \"../contexts/customFieldExtensionContext\";\n\n/**\n * Getter and setter hook for custom field data\n * @returns an object { customField, setFieldData, loading }\n *\n * const { customField, setFieldData, loading } = useCustomField();\n */\nexport const useCustomField = () => {\n  const { customField, setFieldData, loading } = useContext(\n    CustomFieldExtensionContext\n  ) as CustomFieldExtensionContextType;\n\n  return { customField, setFieldData, loading };\n};\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 97;"],"sourceRoot":""}