{"version":3,"sources":["containers/DashboardWidget/StackDashboard.tsx","../node_modules/systemjs/dist lazy groupOptions: {} namespace object"],"names":["StackDashboardExtension","_useState","useState","_useState2","_slicedToArray","stack","setStack","_useState3","_useState4","entries","setEntries","_useState5","_useState6","getStackUsers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","stackData","collaborators","wrap","_context","prev","next","getData","sent","console","log","abrupt","map","u","concat","first_name","last_name","stop","apply","arguments","getEntriesFromContentTypes","_ref2","_callee2","conTypes","_context2","Promise","all","conType","uid","ContentType","Entry","Query","includeContentType","find","_x","compareUpdatedDate","a","b","updated_at","ContentstackAppSDK","init","then","_ref3","_callee3","appSDK","dashboardWidget","frame","_context3","location","DashboardWidget","t0","t1","enableResizing","updateHeight","_x2","useEffect","setDashboardData","_ref4","_callee4","e","_context4","getContentTypes","content_types","cte","ct","content_type","filter","updated_by","full_name","flat","sort","_jsx","className","children","_jsxs","_Fragment","InfiniteScrollTable","canRefresh","canSearch","columnSelector","columns","Header","accessor","addToColumnSelector","id","default","data","fetchTableData","getViewByValue","initialSortBy","desc","itemStatusMap","loadMoreItems","loading","minBatchSizeToFetch","searchPlaceholder","totalCounts","uniqueKey","viewSelector","entry","key","title","_version","locale","user_name","AsyncLoader","webpackEmptyAsyncContext","req","resolve","Error","code","keys","module","exports"],"mappings":"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","file":"static/js/16.34612758.chunk.js","sourcesContent":["//@ts-nocheck\nimport Icon from \"../../assets/customfield.svg\";\nimport React, { useEffect, useState } from 'react';\nimport localeTexts from \"../../common/locales/en-us/index\";\nimport parse from \"html-react-parser\";\nimport ContentstackAppSDK from \"@contentstack/app-sdk\";\nimport { useCustomField } from \"../../common/hooks/useCustomField\";\nimport { AsyncLoader, InfiniteScrollTable } from \"@contentstack/venus-components\";\nimport '@contentstack/venus-components/build/main.css';\nimport { isEmpty } from \"lodash\";\n\n\n\n\nconst StackDashboardExtension = () => {\n    const [stack, setStack] = useState<any>({});\n    const [entries, setEntries] = useState<any[]>();\n    const [users, setUsers] = useState<any>({});\n\n    const getStackUsers = async () => {\n        const stackData = await stack.getData();\n        const collaborators = stackData.collaborators;\n        console.log('users', collaborators);\n        return (collaborators.map((u: any) => {\n            u['full_name'] = `${u.first_name} ${u.last_name}`;\n            return u;\n        }));\n    }\n\n    const getEntriesFromContentTypes = async (conTypes: any) => {\n        return Promise.all(\n            conTypes.map((conType: any) => {\n                const uid = conType.uid;\n                const entries = stack.ContentType(uid).Entry.Query().includeContentType().find();\n                return entries;\n            })\n        )\n    }\n\n    const compareUpdatedDate = (a, b) => {\n        if (a.updated_at < b.updated_at) {\n            return 1;\n        }\n        if (a.updated_at > b.updated_at) {\n            return -1;\n        }\n        return 0;\n    }\n\n    ContentstackAppSDK.init().then(async (appSDK: any) => {\n        const dashboardWidget = await appSDK.location.DashboardWidget;\n        setStack(await appSDK.stack);\n        const frame = dashboardWidget.frame;\n        frame.enableResizing();\n        frame.updateHeight(800);\n        // setStack(cs);\n    })\n\n    useEffect(() => {\n        const setDashboardData = async () => {\n            const conTypes = await stack.getContentTypes();\n            const e = await getEntriesFromContentTypes(conTypes.content_types);\n            const collaborators = await getStackUsers();\n            setEntries(e.map((cte: any) => {\n                return cte.entries.map((ct: any) => {\n                    ct['content_type'] = cte.content_type;\n                    ct['user_name'] = collaborators.filter(u => u.uid === ct.updated_by)[0].full_name;\n                    return ct;\n                })\n            }).flat().sort(compareUpdatedDate))\n        }\n        // const setDashboardData = async () => {\n        //     await getFlatEntriesList();\n        // };\n        setDashboardData();\n    }, [stack]);\n\n    return (\n        <div className=\"dashboard\">\n            <div className=\"dashboard-container\">\n                <div className=\"large-entries-list\">\n                    {entries ? (\n                        <>\n                            <InfiniteScrollTable\n                                canRefresh\n                                canSearch\n                                columnSelector\n                                columns={[\n                                    {\n                                        Header: 'Title',\n                                        accessor: function noRefCheck() { },\n                                        addToColumnSelector: true,\n                                        id: 'title'\n                                    },\n                                    {\n                                        Header: 'Locale',\n                                        accessor: 'locale',\n                                        default: false,\n                                        addToColumnSelector: true,\n                                    },\n                                ]}\n                                data={[entries]}\n                                fetchTableData={function noRefCheck() { }}\n                                getViewByValue={function noRefCheck() { }}\n                                initialSortBy={[\n                                    {\n                                        desc: true,\n                                        id: 'title'\n                                    }\n                                ]}\n                                itemStatusMap={{\n                                    '0': 'loading'\n                                }}\n                                loadMoreItems={function noRefCheck() { }}\n                                loading\n                                minBatchSizeToFetch={50}\n                                searchPlaceholder=\"Search\"\n                                totalCounts={null}\n                                uniqueKey=\"uid\"\n                                viewSelector\n                            />\n                            <table>\n                                <tbody>\n                                    {entries?.map((entry, key) => (\n                                        <tr key={key}>\n                                            <td>{entry.title ? entry.title : 'Untitled'}</td>\n                                            <td>{entry.content_type.title ? entry.content_type.title : ''}</td>\n                                            <td>{entry._version ? entry._version : ''}</td>\n                                            <td>{entry.locale ? entry.locale : ''}</td>\n                                            <td>{entry.updated_by ? entry.user_name : ''}</td>\n                                            <td>{entry.updated_at ? entry.updated_at : ''}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </>\n                    ) : (<AsyncLoader className=\"loader\" />)\n                    }\n                </div>\n            </div>\n        </div >\n    );\n};\n\nexport default StackDashboardExtension;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 97;"],"sourceRoot":""}