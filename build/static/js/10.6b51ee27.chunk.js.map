{"version":3,"sources":["containers/CustomField/LocalizedDropdown.tsx","common/hooks/useCustomField.tsx","../node_modules/systemjs/dist lazy groupOptions: {} namespace object"],"names":["LocalizedDropdown","_useState","useState","_useState2","_slicedToArray","selectOption","setSelectOption","_useState3","_useState4","localizationOptions","setLocalizationOptions","_useCustomField","useCustomField","customField","setFieldData","_useState5","_useState6","errorMessage","setErrorMessage","useEffect","ContentstackAppSDK","init","then","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","appSDK","cF","stack","entry","localizationOptionsUID","wrap","_context","prev","next","location","CustomField","sent","_data","localization_options","uid","ContentType","Entry","language","locale","fetch","options","option","t0","isEmpty","_objectSpread","frame","updateHeight","stop","_x","apply","arguments","_jsx","className","children","Paragraph","text","undefined","length","Select","selectLabel","map","index","id","label","option_text","searchableLable","value","option_value","onChange","e","useContext","CustomFieldExtensionContext","loading","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module","exports"],"mappings":"4PA4EeA,UAnEW,WAEtB,IAAAC,EAAwCC,qBAAeC,EAAAC,YAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAGpCI,EAAsDL,qBAAeM,EAAAJ,YAAAG,EAAA,GAA9DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAClDG,EAA2CC,cAAnCC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aACrBC,EAAwCb,qBAAec,EAAAZ,YAAAW,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GA2BpC,OAzBAG,qBAAU,WACNC,IAAmBC,OAAOC,KAAI,eAAAC,EAAAC,YAAAC,cAAAC,MAAC,SAAAC,EAAOC,GAAW,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,cAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC5BR,EAAOS,SAASC,YAAY,KAAD,EAKyB,OAL/DT,EAAEK,EAAAK,KACFT,EAAQD,EAAGC,MACXC,EAAQF,EAAGE,MAAKG,EAAAC,KAAA,EAGlBH,EAAyBD,EAAMS,MAAMC,qBAAqB,GAAGC,IAAIR,EAAAE,KAAA,EAC3DN,EAAMa,YAdJ,8BAc6BC,MAAMZ,GAAwBa,SAASd,EAAMe,QAAQC,QAAQzB,MAAK,SAAC0B,GACpGtC,EAAuBsC,EAAQjB,MAAMU,qBAAqBQ,OAC9D,IAAG,KAAD,EAAAf,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAEFhB,EAAgB,kDAAkD,QAEjEiC,kBAAQtC,IAAgC,OAAhBA,GACzBP,EAAe8C,YAAC,CAAC,EAAIvC,IAEzBgB,EAAGwB,MAAMC,aAAa,KAAK,yBAAApB,EAAAqB,OAAA,GAAA5B,EAAA,mBAC9B,gBAAA6B,GAAA,OAAAjC,EAAAkC,MAAA,KAAAC,UAAA,EAjB6B,GAkBlC,GAAG,CAAC7C,IAEJM,qBAAU,WACNL,EAAaT,EACjB,GAAG,CAACA,IAGAsD,cAAA,OAAKC,UAAU,eAAcC,SACzBF,cAAA,OAAKC,UAAU,iCAAgCC,SAC1C5C,EACG0C,cAACG,IAAS,CAACC,KAAM9C,SAEQ+C,IAAxBvD,GAAqCA,EAAoBwD,OAAS,EAC/DN,cAAA,OAAAE,SACIF,cAACO,IAAM,CACHC,YAAY,mBACZnB,QAASvC,EAAoB2D,KAAI,SAACrC,EAAYsC,GAAa,MACvD,CACIC,GAAID,EACJE,MAAOxC,EAAMyC,YACbC,gBAAiB1C,EAAMyC,YACvBE,MAAO3C,EAAM4C,aAChB,IAELC,SAAU,SAACC,GAAM,OAAKvE,EAAgBuE,EAAE,EACxCH,MAAOrE,MAKfsD,cAACG,IAAS,CAACC,KAAI,eAOvC,C,mCC1EA,qDASanD,EAAiB,WAC5B,IAAAW,EAA+CuD,qBAC7CC,KAGF,MAAO,CAAElE,YAJUU,EAAXV,YAIcC,aAJWS,EAAZT,aAIekE,QAJMzD,EAAPyD,QAKrC,C,mBCfA,SAASC,EAAyBC,GAGjC,OAAOC,QAAQC,UAAU9D,MAAK,WAC7B,IAAIuD,EAAI,IAAIQ,MAAM,uBAAyBH,EAAM,KAEjD,MADAL,EAAES,KAAO,mBACHT,CACP,GACD,CACAI,EAAyBM,KAAO,WAAa,MAAO,EAAI,EACxDN,EAAyBG,QAAUH,EACnCO,EAAOC,QAAUR,EACjBA,EAAyBX,GAAK,E","file":"static/js/10.6b51ee27.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport localeTexts from \"../../common/locales/en-us/index\";\nimport parse from \"html-react-parser\";\nimport ContentstackAppSDK from \"@contentstack/app-sdk\";\nimport { useCustomField } from \"../../common/hooks/useCustomField\";\nimport { Select, Paragraph } from \"@contentstack/venus-components\";\nimport '@contentstack/venus-components/build/main.css';\nimport { isEmpty } from \"lodash\";\n\nconst LocalizedDropdown = () => {\n\n    const [selectOption, setSelectOption] = useState<any>();\n    const OPTIONS_UID = 'localized_dropdown_options'\n\n    const [localizationOptions, setLocalizationOptions] = useState<any>();\n    const { customField, setFieldData }: any = useCustomField();\n    const [errorMessage, setErrorMessage] = useState<any>();\n\n    useEffect(() => {\n        ContentstackAppSDK.init().then(async (appSDK: any) => {\n            const cF = await appSDK.location.CustomField;\n            const stack = cF.stack;\n            const entry = cF.entry;\n            let localizationOptionsUID: any;\n            try {\n                localizationOptionsUID = entry._data.localization_options[0].uid;\n                await stack.ContentType(OPTIONS_UID).Entry(localizationOptionsUID).language(entry.locale).fetch().then((options: any) => {\n                    setLocalizationOptions(options.entry.localization_options.option)\n                });\n            } catch {\n                setErrorMessage(`Couldn't find referenced localization options.`);\n            }\n            if (!isEmpty(customField) && customField !== null) {\n                setSelectOption({ ...customField });\n            }\n            cF.frame.updateHeight(200);\n        })\n    }, [customField]);\n\n    useEffect(() => {\n        setFieldData(selectOption)\n    }, [selectOption])\n\n    return (\n        <div className=\"custom-field\">\n            <div className=\"localizable-dropdown-container\">\n                {errorMessage ? (\n                    <Paragraph text={errorMessage} />\n                ) : (\n                    (localizationOptions !== undefined && localizationOptions.length > 0 ? (\n                        <div>\n                            <Select\n                                selectLabel=\"Select an option\"\n                                options={localizationOptions.map((entry: any, index: number) => (\n                                    {\n                                        id: index,\n                                        label: entry.option_text,\n                                        searchableLable: entry.option_text,\n                                        value: entry.option_value\n                                    }\n                                ))}\n                                onChange={(e: any) => setSelectOption(e)}\n                                value={selectOption}\n                            />\n\n                        </div>\n                    ) : (\n                        <Paragraph text={`Loading`} />\n                    ))\n                )}\n\n            </div>\n        </div>\n    );\n};\n\nexport default LocalizedDropdown;\n","import { useContext } from \"react\";\nimport { CustomFieldExtensionContext, CustomFieldExtensionContextType } from \"../contexts/customFieldExtensionContext\";\n\n/**\n * Getter and setter hook for custom field data\n * @returns an object { customField, setFieldData, loading }\n *\n * const { customField, setFieldData, loading } = useCustomField();\n */\nexport const useCustomField = () => {\n  const { customField, setFieldData, loading } = useContext(\n    CustomFieldExtensionContext\n  ) as CustomFieldExtensionContextType;\n\n  return { customField, setFieldData, loading };\n};\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 97;"],"sourceRoot":""}